	iOS Coding Challenge
===

Attached is a simple program "server.py" that, when started, listens at port 1234 for incoming socket connection.
After a client connects, the server will spit out a stream of messages.

Write an iOS application that can connect to the "server.py" program, and interpret the incoming messages.
Make a view controller that shows a log of the received commands.
Use UITableView for the log, where each command is displayed in a UITableViewCell.

When a command is received a new cell gets added to the table.
If the command is “absolute” the cell will display the RGB value and have its background color changed to it.
If the command is “relative” the cell will display the relative RGB value and its background color will be the most recent “absolute” RGB value plus the sum of the relative commands that came after.

Sequence	| 1		2		3		4		5		6
Command		| Absolute	Relative 	Relative	Absolute	Relative	Relative
Payload		|(100,0,0)	(25,0,25)	(0,50,0)	(100,100,100)	(150,150,150)	(0,5,0)
Display		|(100,0,0)	(25,0,25)	(0,50,0)	(100,100,100)	(150,150,150)	(0,5,0)
Background	|(100,0,0)	(125,0,25)	(125,50,25)	(100,100,100)	(250,250,250)	(250,255,250)


Design goals in order of importance:
- Good separation of concerns. Clean, well-structured code. Testability (you don’t have to write actual tests, but do tell us how you would test your code).
- Responsiveness. Consider that the command processing might get CPU intensive in the future.
- Speed and low memory footprint.

You are only allowed to use the standard Apple frameworks.

We do not expect you to finish the challenge in the allotted time. We ask that you focus on the goals above and show us your best work, not your lengthiest.

As a reference: The "server.py" program prints the expected current RGB values to stdout, just before sending out the next command.

Please document your assumptions.

Protocol
---

Each message is a "color command", which the client should use to change the color of the interface in real-time.
The color of the interface is represented by 3x 8-bit values, R, G and B.
The connecting client is supposed to keep state of the current color. Upon connect, the color should be reset to (127, 127, 127).
There are 2 command types, relative and absolute.

Relative
---
The relative command, changes the components with a relative offset.
The message has this structure:

8-bit constant 	                  -- 0x01 ("relative" command)
16-bit signed int, network endian -- R offset
16-bit signed int, network endian -- G offset
16-bit signed int, network endian -- B offset

Upon receiving a "relative" command, the client is supposed to offset the current components with the given offsets.


Absolute
---
The absolute command, changes the components to the specified absolute values.
The message has this structure:

8-bit unsigned int -- 0x02 ("absolute" command)
8-bit unsigned int -- absolute R value
8-bit unsigned int -- absolute G value
8-bit unsigned int -- absolute B value

Upon receiving a "absolute" command, the client is supposed to set the current components to the given absolute values.
